// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/user.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GrpcAuthService {
  /// <summary>
  /// The service definition.
  /// </summary>
  public static partial class Register
  {
    static readonly string __ServiceName = "Register";

    static readonly grpc::Marshaller<global::GrpcAuthService.UserRequest> __Marshaller_UserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcAuthService.UserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GrpcAuthService.UserReply> __Marshaller_UserReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GrpcAuthService.UserReply.Parser.ParseFrom);

    static readonly grpc::Method<global::GrpcAuthService.UserRequest, global::GrpcAuthService.UserReply> __Method_RegisterUser = new grpc::Method<global::GrpcAuthService.UserRequest, global::GrpcAuthService.UserReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterUser",
        __Marshaller_UserRequest,
        __Marshaller_UserReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GrpcAuthService.UserReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Register</summary>
    [grpc::BindServiceMethod(typeof(Register), "BindService")]
    public abstract partial class RegisterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::GrpcAuthService.UserReply> RegisterUser(global::GrpcAuthService.UserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RegisterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterUser, serviceImpl.RegisterUser).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RegisterBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterUser, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GrpcAuthService.UserRequest, global::GrpcAuthService.UserReply>(serviceImpl.RegisterUser));
    }

  }
}
#endregion
